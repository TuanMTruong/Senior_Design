
adc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  0000051e  000005b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000051e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000039  00800112  00800112  000005c4  2**0
                  ALLOC
  3 .stab         00000954  00000000  00000000  000005c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000013b  00000000  00000000  00000f18  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000040  00000000  00000000  00001053  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000112  00000000  00000000  00001093  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000087f  00000000  00000000  000011a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000002ea  00000000  00000000  00001a24  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000006d4  00000000  00000000  00001d0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000c0  00000000  00000000  000023e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001d6  00000000  00000000  000024a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000083  00000000  00000000  0000267a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000007a  00000000  00000000  000026fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e1       	ldi	r30, 0x1E	; 30
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a2 e1       	ldi	r26, 0x12	; 18
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ab 34       	cpi	r26, 0x4B	; 75
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 79 00 	call	0xf2	; 0xf2 <main>
  c6:	0c 94 8d 02 	jmp	0x51a	; 0x51a <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <spi_init>:
div_t fp_adc_result, fp_low_result; //double fp_adc_result; 

/*******************************************************/
void spi_init(void){
 /* Run this code before attempting to write to the LCD.*/
 DDRF  |= 0x08;  //port F bit 3 is enable for LCD
  ce:	e1 e6       	ldi	r30, 0x61	; 97
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	88 60       	ori	r24, 0x08	; 8
  d6:	80 83       	st	Z, r24
 PORTF &= 0xF7;  //port F bit 3 is initially low
  d8:	e2 e6       	ldi	r30, 0x62	; 98
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	87 7f       	andi	r24, 0xF7	; 247
  e0:	80 83       	st	Z, r24
 DDRB  |= 0x07;  //Turn on SS, MOSI, SCLK
  e2:	87 b3       	in	r24, 0x17	; 23
  e4:	87 60       	ori	r24, 0x07	; 7
  e6:	87 bb       	out	0x17, r24	; 23
 PORTB |= 0x01;  //port B initalization for SPI, SS_n off
  e8:	c0 9a       	sbi	0x18, 0	; 24
 //Master mode, Clock=clk/4, Cycle half phase, Low polarity, MSB first
 SPCR=0x50;
  ea:	80 e5       	ldi	r24, 0x50	; 80
  ec:	8d b9       	out	0x0d, r24	; 13
 SPSR=0x00;
  ee:	1e b8       	out	0x0e, r1	; 14
 }
  f0:	08 95       	ret

000000f2 <main>:
/*******************************************************/

int main() {
  f2:	cf 93       	push	r28
  f4:	df 93       	push	r29

uint16_t adc_result;  //holds the result from the ADC

//initalize the SPI port and then the LCD
spi_init();
  f6:	0e 94 67 00 	call	0xce	; 0xce <spi_init>
lcd_init(); 
  fa:	0e 94 a0 01 	call	0x340	; 0x340 <lcd_init>
clear_display();
  fe:	0e 94 f6 00 	call	0x1ec	; 0x1ec <clear_display>

//Initalize ADC and its ports
DDRF &= ~(1<<PF7); //port F bit 7 is ADC input  
 102:	80 91 61 00 	lds	r24, 0x0061
 106:	8f 77       	andi	r24, 0x7F	; 127
 108:	80 93 61 00 	sts	0x0061, r24
PORTF |= (1<<PF7); //poft F bit 7 pullups are off
 10c:	80 91 62 00 	lds	r24, 0x0062
 110:	80 68       	ori	r24, 0x80	; 128
 112:	80 93 62 00 	sts	0x0062, r24

ADMUX |= (1<<REFS0) | (1<<MUX2) | (1<<MUX1) | (1<<MUX0);    //single-ended port F bit 7, right adjusted for 10 bits
 116:	87 b1       	in	r24, 0x07	; 7
 118:	87 64       	ori	r24, 0x47	; 71
 11a:	87 b9       	out	0x07, r24	; 7
ADCSRA |= (1<<ADEN) | (1<<ADPS2) | (1<< ADPS1) | (1<<ADPS0);    //ADC enabled, don't start yet, single shot mode 
 11c:	86 b1       	in	r24, 0x06	; 6
 11e:	87 68       	ori	r24, 0x87	; 135
 120:	86 b9       	out	0x06, r24	; 6
  //remainder in a structure called div_t that contains two members, quot and rem. 
  
  //now determine Vin, where Vin = (adc_result/204.8)
  fp_adc_result = div(adc_result, 205);              //do division by 205 (204.8 to be exact)
  itoa(fp_adc_result.quot, lcd_str_h, 10);           //convert non-fractional part to ascii string
  fp_low_result = div((fp_adc_result.rem*100), 205); //get the decimal fraction into non-fractional form 
 122:	c4 e6       	ldi	r28, 0x64	; 100
 124:	d0 e0       	ldi	r29, 0x00	; 0
ADCSRA |= (1<<ADEN) | (1<<ADPS2) | (1<< ADPS1) | (1<<ADPS0);    //ADC enabled, don't start yet, single shot mode 
                  //division factor is 128 (125khz)

while(1){ 

  ADCSRA |= (1<<ADSC);                     //poke ADSC and start conversion
 126:	36 9a       	sbi	0x06, 6	; 6
  while(bit_is_clear(ADCSRA, ADIF));  //spin while interrupt flag not set
 128:	34 9b       	sbis	0x06, 4	; 6
 12a:	fe cf       	rjmp	.-4      	; 0x128 <main+0x36>
  ADCSRA |= (1<<ADIF);              //its done, clear flag by writing a one 
 12c:	34 9a       	sbi	0x06, 4	; 6
  adc_result = ADC;                   //read the ADC output as 16 bits
 12e:	84 b1       	in	r24, 0x04	; 4
 130:	95 b1       	in	r25, 0x05	; 5

  //div() function computes the value num/denom and returns the quotient and
  //remainder in a structure called div_t that contains two members, quot and rem. 
  
  //now determine Vin, where Vin = (adc_result/204.8)
  fp_adc_result = div(adc_result, 205);              //do division by 205 (204.8 to be exact)
 132:	6d ec       	ldi	r22, 0xCD	; 205
 134:	70 e0       	ldi	r23, 0x00	; 0
 136:	0e 94 35 02 	call	0x46a	; 0x46a <__divmodhi4>
 13a:	60 93 37 01 	sts	0x0137, r22
 13e:	70 93 38 01 	sts	0x0138, r23
 142:	80 93 39 01 	sts	0x0139, r24
 146:	90 93 3a 01 	sts	0x013A, r25
  itoa(fp_adc_result.quot, lcd_str_h, 10);           //convert non-fractional part to ascii string
 14a:	80 91 37 01 	lds	r24, 0x0137
 14e:	90 91 38 01 	lds	r25, 0x0138
 152:	67 e2       	ldi	r22, 0x27	; 39
 154:	71 e0       	ldi	r23, 0x01	; 1
 156:	4a e0       	ldi	r20, 0x0A	; 10
 158:	50 e0       	ldi	r21, 0x00	; 0
 15a:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <itoa>
  fp_low_result = div((fp_adc_result.rem*100), 205); //get the decimal fraction into non-fractional form 
 15e:	80 91 39 01 	lds	r24, 0x0139
 162:	90 91 3a 01 	lds	r25, 0x013A
 166:	9c 01       	movw	r18, r24
 168:	2c 9f       	mul	r18, r28
 16a:	c0 01       	movw	r24, r0
 16c:	2d 9f       	mul	r18, r29
 16e:	90 0d       	add	r25, r0
 170:	3c 9f       	mul	r19, r28
 172:	90 0d       	add	r25, r0
 174:	11 24       	eor	r1, r1
 176:	6d ec       	ldi	r22, 0xCD	; 205
 178:	70 e0       	ldi	r23, 0x00	; 0
 17a:	0e 94 35 02 	call	0x46a	; 0x46a <__divmodhi4>
 17e:	60 93 23 01 	sts	0x0123, r22
 182:	70 93 24 01 	sts	0x0124, r23
 186:	80 93 25 01 	sts	0x0125, r24
 18a:	90 93 26 01 	sts	0x0126, r25
  itoa(fp_low_result.quot, lcd_str_l, 10);           //convert fractional part to ascii string
 18e:	80 91 23 01 	lds	r24, 0x0123
 192:	90 91 24 01 	lds	r25, 0x0124
 196:	62 e1       	ldi	r22, 0x12	; 18
 198:	71 e0       	ldi	r23, 0x01	; 1
 19a:	4a e0       	ldi	r20, 0x0A	; 10
 19c:	50 e0       	ldi	r21, 0x00	; 0
 19e:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <itoa>

  //send string to LCD
  string2lcd(lcd_str_h);  //write upper half
 1a2:	87 e2       	ldi	r24, 0x27	; 39
 1a4:	91 e0       	ldi	r25, 0x01	; 1
 1a6:	0e 94 73 01 	call	0x2e6	; 0x2e6 <string2lcd>
  char2lcd('.');          //write decimal point
 1aa:	8e e2       	ldi	r24, 0x2E	; 46
 1ac:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <char2lcd>
  string2lcd(lcd_str_l);  //write lower half
 1b0:	82 e1       	ldi	r24, 0x12	; 18
 1b2:	91 e0       	ldi	r25, 0x01	; 1
 1b4:	0e 94 73 01 	call	0x2e6	; 0x2e6 <string2lcd>
 1b8:	80 e0       	ldi	r24, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ba:	ef e3       	ldi	r30, 0x3F	; 63
 1bc:	fc e9       	ldi	r31, 0x9C	; 156
 1be:	31 97       	sbiw	r30, 0x01	; 1
 1c0:	f1 f7       	brne	.-4      	; 0x1be <main+0xcc>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <main+0xd2>
 1c4:	00 00       	nop

  for(i=0;i<=10;i++){ _delay_ms(10);}  //delay 0.1 sec
 1c6:	8f 5f       	subi	r24, 0xFF	; 255
 1c8:	80 93 22 01 	sts	0x0122, r24
 1cc:	8b 30       	cpi	r24, 0x0B	; 11
 1ce:	a8 f3       	brcs	.-22     	; 0x1ba <main+0xc8>
  clear_display();
 1d0:	0e 94 f6 00 	call	0x1ec	; 0x1ec <clear_display>
  cursor_home();
 1d4:	0e 94 0e 01 	call	0x21c	; 0x21c <cursor_home>
  } //while
 1d8:	a6 cf       	rjmp	.-180    	; 0x126 <main+0x34>

000001da <strobe_lcd>:
char lcd_str[16];  //holds string to send to lcd  
char lcd_test[17]  = {"***-LCD_Test-***"};

void strobe_lcd(void){
	//twiddles bit 3, PORTF creating the enable signal for the LCD
	PORTF |= 0x08;
 1da:	e2 e6       	ldi	r30, 0x62	; 98
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	80 81       	ld	r24, Z
 1e0:	88 60       	ori	r24, 0x08	; 8
 1e2:	80 83       	st	Z, r24
	PORTF &= ~0x08;
 1e4:	80 81       	ld	r24, Z
 1e6:	87 7f       	andi	r24, 0xF7	; 247
 1e8:	80 83       	st	Z, r24
}          
 1ea:	08 95       	ret

000001ec <clear_display>:
 
void clear_display(void){
	SPDR = 0x00;    //command, not data
 1ec:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 1ee:	77 9b       	sbis	0x0e, 7	; 14
 1f0:	fe cf       	rjmp	.-4      	; 0x1ee <clear_display+0x2>
	SPDR = 0x01;    //clear display command
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 1f6:	77 9b       	sbis	0x0e, 7	; 14
 1f8:	fe cf       	rjmp	.-4      	; 0x1f6 <clear_display+0xa>
char lcd_str[16];  //holds string to send to lcd  
char lcd_test[17]  = {"***-LCD_Test-***"};

void strobe_lcd(void){
	//twiddles bit 3, PORTF creating the enable signal for the LCD
	PORTF |= 0x08;
 1fa:	80 91 62 00 	lds	r24, 0x0062
 1fe:	88 60       	ori	r24, 0x08	; 8
 200:	80 93 62 00 	sts	0x0062, r24
	PORTF &= ~0x08;
 204:	80 91 62 00 	lds	r24, 0x0062
 208:	87 7f       	andi	r24, 0xF7	; 247
 20a:	80 93 62 00 	sts	0x0062, r24
 20e:	8f e3       	ldi	r24, 0x3F	; 63
 210:	9f e1       	ldi	r25, 0x1F	; 31
 212:	01 97       	sbiw	r24, 0x01	; 1
 214:	f1 f7       	brne	.-4      	; 0x212 <clear_display+0x26>
 216:	00 c0       	rjmp	.+0      	; 0x218 <clear_display+0x2c>
 218:	00 00       	nop
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
	SPDR = 0x01;    //clear display command
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
	strobe_lcd();   //strobe the LCD enable pin
	_delay_ms(2);   //obligatory waiting for slow LCD
}         
 21a:	08 95       	ret

0000021c <cursor_home>:

void cursor_home(void){
	SPDR = 0x00;    //command, not data
 21c:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 21e:	77 9b       	sbis	0x0e, 7	; 14
 220:	fe cf       	rjmp	.-4      	; 0x21e <cursor_home+0x2>
	SPDR = 0x02;   // cursor go home position
 222:	82 e0       	ldi	r24, 0x02	; 2
 224:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 226:	77 9b       	sbis	0x0e, 7	; 14
 228:	fe cf       	rjmp	.-4      	; 0x226 <cursor_home+0xa>
char lcd_str[16];  //holds string to send to lcd  
char lcd_test[17]  = {"***-LCD_Test-***"};

void strobe_lcd(void){
	//twiddles bit 3, PORTF creating the enable signal for the LCD
	PORTF |= 0x08;
 22a:	80 91 62 00 	lds	r24, 0x0062
 22e:	88 60       	ori	r24, 0x08	; 8
 230:	80 93 62 00 	sts	0x0062, r24
	PORTF &= ~0x08;
 234:	80 91 62 00 	lds	r24, 0x0062
 238:	87 7f       	andi	r24, 0xF7	; 247
 23a:	80 93 62 00 	sts	0x0062, r24
 23e:	8f e9       	ldi	r24, 0x9F	; 159
 240:	9f e0       	ldi	r25, 0x0F	; 15
 242:	01 97       	sbiw	r24, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <cursor_home+0x26>
 246:	00 c0       	rjmp	.+0      	; 0x248 <cursor_home+0x2c>
 248:	00 00       	nop
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
	SPDR = 0x02;   // cursor go home position
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
	strobe_lcd();
	_delay_ms(1);
}         
 24a:	08 95       	ret

0000024c <home_line2>:
  
void home_line2(void){
	SPDR = 0x00;    //command, not data
 24c:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 24e:	77 9b       	sbis	0x0e, 7	; 14
 250:	fe cf       	rjmp	.-4      	; 0x24e <home_line2+0x2>
	SPDR = 0xC0;   // cursor go home on line 2
 252:	80 ec       	ldi	r24, 0xC0	; 192
 254:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 256:	77 9b       	sbis	0x0e, 7	; 14
 258:	fe cf       	rjmp	.-4      	; 0x256 <home_line2+0xa>
char lcd_str[16];  //holds string to send to lcd  
char lcd_test[17]  = {"***-LCD_Test-***"};

void strobe_lcd(void){
	//twiddles bit 3, PORTF creating the enable signal for the LCD
	PORTF |= 0x08;
 25a:	80 91 62 00 	lds	r24, 0x0062
 25e:	88 60       	ori	r24, 0x08	; 8
 260:	80 93 62 00 	sts	0x0062, r24
	PORTF &= ~0x08;
 264:	80 91 62 00 	lds	r24, 0x0062
 268:	87 7f       	andi	r24, 0xF7	; 247
 26a:	80 93 62 00 	sts	0x0062, r24
 26e:	8f e9       	ldi	r24, 0x9F	; 159
 270:	9f e0       	ldi	r25, 0x0F	; 15
 272:	01 97       	sbiw	r24, 0x01	; 1
 274:	f1 f7       	brne	.-4      	; 0x272 <home_line2+0x26>
 276:	00 c0       	rjmp	.+0      	; 0x278 <home_line2+0x2c>
 278:	00 00       	nop
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
	SPDR = 0xC0;   // cursor go home on line 2
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
	strobe_lcd(); 
	_delay_ms(1);  
}                           
 27a:	08 95       	ret

0000027c <fill_spaces>:
 
void fill_spaces(void){
 27c:	80 e1       	ldi	r24, 0x10	; 16
 27e:	90 e0       	ldi	r25, 0x00	; 0
	int count;
	for (count=0; count<=15; count++){
		SPDR = 0x01; //set SR for data
 280:	41 e0       	ldi	r20, 0x01	; 1
		while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
		SPDR = 0x20; 
 282:	30 e2       	ldi	r19, 0x20	; 32
}                           
 
void fill_spaces(void){
	int count;
	for (count=0; count<=15; count++){
		SPDR = 0x01; //set SR for data
 284:	4f b9       	out	0x0f, r20	; 15
		while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 286:	77 9b       	sbis	0x0e, 7	; 14
 288:	fe cf       	rjmp	.-4      	; 0x286 <fill_spaces+0xa>
		SPDR = 0x20; 
 28a:	3f b9       	out	0x0f, r19	; 15
		while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 28c:	77 9b       	sbis	0x0e, 7	; 14
 28e:	fe cf       	rjmp	.-4      	; 0x28c <fill_spaces+0x10>
char lcd_str[16];  //holds string to send to lcd  
char lcd_test[17]  = {"***-LCD_Test-***"};

void strobe_lcd(void){
	//twiddles bit 3, PORTF creating the enable signal for the LCD
	PORTF |= 0x08;
 290:	20 91 62 00 	lds	r18, 0x0062
 294:	28 60       	ori	r18, 0x08	; 8
 296:	20 93 62 00 	sts	0x0062, r18
	PORTF &= ~0x08;
 29a:	20 91 62 00 	lds	r18, 0x0062
 29e:	27 7f       	andi	r18, 0xF7	; 247
 2a0:	20 93 62 00 	sts	0x0062, r18
 2a4:	ef e9       	ldi	r30, 0x9F	; 159
 2a6:	ff e0       	ldi	r31, 0x0F	; 15
 2a8:	31 97       	sbiw	r30, 0x01	; 1
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <fill_spaces+0x2c>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <fill_spaces+0x32>
 2ae:	00 00       	nop
 2b0:	01 97       	sbiw	r24, 0x01	; 1
	_delay_ms(1);  
}                           
 
void fill_spaces(void){
	int count;
	for (count=0; count<=15; count++){
 2b2:	41 f7       	brne	.-48     	; 0x284 <fill_spaces+0x8>
		SPDR = 0x20; 
		while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
		strobe_lcd();
		_delay_ms(1);
	}
}  
 2b4:	08 95       	ret

000002b6 <char2lcd>:
   
void char2lcd(char a_char){
	//sends a char to the LCD
	//usage: char2lcd('H');  // send an H to the LCD
	SPDR = 0x01;   //set SR for data xfer with LSB=1
 2b6:	91 e0       	ldi	r25, 0x01	; 1
 2b8:	9f b9       	out	0x0f, r25	; 15
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 2ba:	77 9b       	sbis	0x0e, 7	; 14
 2bc:	fe cf       	rjmp	.-4      	; 0x2ba <char2lcd+0x4>
	SPDR = a_char; //send the char to the SPI port
 2be:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 2c0:	77 9b       	sbis	0x0e, 7	; 14
 2c2:	fe cf       	rjmp	.-4      	; 0x2c0 <char2lcd+0xa>
char lcd_str[16];  //holds string to send to lcd  
char lcd_test[17]  = {"***-LCD_Test-***"};

void strobe_lcd(void){
	//twiddles bit 3, PORTF creating the enable signal for the LCD
	PORTF |= 0x08;
 2c4:	80 91 62 00 	lds	r24, 0x0062
 2c8:	88 60       	ori	r24, 0x08	; 8
 2ca:	80 93 62 00 	sts	0x0062, r24
	PORTF &= ~0x08;
 2ce:	80 91 62 00 	lds	r24, 0x0062
 2d2:	87 7f       	andi	r24, 0xF7	; 247
 2d4:	80 93 62 00 	sts	0x0062, r24
 2d8:	8f e9       	ldi	r24, 0x9F	; 159
 2da:	9f e0       	ldi	r25, 0x0F	; 15
 2dc:	01 97       	sbiw	r24, 0x01	; 1
 2de:	f1 f7       	brne	.-4      	; 0x2dc <char2lcd+0x26>
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <char2lcd+0x2c>
 2e2:	00 00       	nop
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
	SPDR = a_char; //send the char to the SPI port
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
	strobe_lcd();  //toggle the enable bit
	_delay_ms(1); //wait the prescribed time for the LCD to process
}
 2e4:	08 95       	ret

000002e6 <string2lcd>:
  
void string2lcd(char *lcd_str){

	//sends a string to LCD
	int count;
	for (count=0; count<=(strlen(lcd_str)-1); count++){
 2e6:	40 e0       	ldi	r20, 0x00	; 0
 2e8:	50 e0       	ldi	r21, 0x00	; 0
 2ea:	20 e0       	ldi	r18, 0x00	; 0
 2ec:	30 e0       	ldi	r19, 0x00	; 0
		SPDR = 0x01; //set SR for data
 2ee:	61 e0       	ldi	r22, 0x01	; 1
 2f0:	6f b9       	out	0x0f, r22	; 15
		while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 2f2:	77 9b       	sbis	0x0e, 7	; 14
 2f4:	fe cf       	rjmp	.-4      	; 0x2f2 <string2lcd+0xc>
		SPDR = lcd_str[count]; 
 2f6:	48 0f       	add	r20, r24
 2f8:	59 1f       	adc	r21, r25
 2fa:	fa 01       	movw	r30, r20
 2fc:	40 81       	ld	r20, Z
 2fe:	4f b9       	out	0x0f, r20	; 15
		while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 300:	77 9b       	sbis	0x0e, 7	; 14
 302:	fe cf       	rjmp	.-4      	; 0x300 <string2lcd+0x1a>
char lcd_str[16];  //holds string to send to lcd  
char lcd_test[17]  = {"***-LCD_Test-***"};

void strobe_lcd(void){
	//twiddles bit 3, PORTF creating the enable signal for the LCD
	PORTF |= 0x08;
 304:	40 91 62 00 	lds	r20, 0x0062
 308:	48 60       	ori	r20, 0x08	; 8
 30a:	40 93 62 00 	sts	0x0062, r20
	PORTF &= ~0x08;
 30e:	40 91 62 00 	lds	r20, 0x0062
 312:	47 7f       	andi	r20, 0xF7	; 247
 314:	40 93 62 00 	sts	0x0062, r20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 318:	ef e8       	ldi	r30, 0x8F	; 143
 31a:	f1 e0       	ldi	r31, 0x01	; 1
 31c:	31 97       	sbiw	r30, 0x01	; 1
 31e:	f1 f7       	brne	.-4      	; 0x31c <string2lcd+0x36>
 320:	00 c0       	rjmp	.+0      	; 0x322 <string2lcd+0x3c>
 322:	00 00       	nop
  
void string2lcd(char *lcd_str){

	//sends a string to LCD
	int count;
	for (count=0; count<=(strlen(lcd_str)-1); count++){
 324:	2f 5f       	subi	r18, 0xFF	; 255
 326:	3f 4f       	sbci	r19, 0xFF	; 255
 328:	a9 01       	movw	r20, r18
 32a:	fc 01       	movw	r30, r24
 32c:	01 90       	ld	r0, Z+
 32e:	00 20       	and	r0, r0
 330:	e9 f7       	brne	.-6      	; 0x32c <string2lcd+0x46>
 332:	e8 1b       	sub	r30, r24
 334:	f9 0b       	sbc	r31, r25
 336:	32 97       	sbiw	r30, 0x02	; 2
 338:	e2 17       	cp	r30, r18
 33a:	f3 07       	cpc	r31, r19
 33c:	c8 f6       	brcc	.-78     	; 0x2f0 <string2lcd+0xa>
		SPDR = lcd_str[count]; 
		while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
		strobe_lcd();
		_delay_us(100);
	}                  
} 
 33e:	08 95       	ret

00000340 <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 340:	8f e5       	ldi	r24, 0x5F	; 95
 342:	9a ee       	ldi	r25, 0xEA	; 234
 344:	01 97       	sbiw	r24, 0x01	; 1
 346:	f1 f7       	brne	.-4      	; 0x344 <lcd_init+0x4>
 348:	00 c0       	rjmp	.+0      	; 0x34a <lcd_init+0xa>
 34a:	00 00       	nop
 34c:	83 e0       	ldi	r24, 0x03	; 3
 34e:	90 e0       	ldi	r25, 0x00	; 0
	//initalize the LCD to receive data
	_delay_ms(15);   
	for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
		SPDR = 0x00;
		while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
		SPDR = 0x30;
 350:	30 e3       	ldi	r19, 0x30	; 48
void lcd_init(void){
	int i;
	//initalize the LCD to receive data
	_delay_ms(15);   
	for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
		SPDR = 0x00;
 352:	1f b8       	out	0x0f, r1	; 15
		while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 354:	77 9b       	sbis	0x0e, 7	; 14
 356:	fe cf       	rjmp	.-4      	; 0x354 <lcd_init+0x14>
		SPDR = 0x30;
 358:	3f b9       	out	0x0f, r19	; 15
		while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 35a:	77 9b       	sbis	0x0e, 7	; 14
 35c:	fe cf       	rjmp	.-4      	; 0x35a <lcd_init+0x1a>
char lcd_str[16];  //holds string to send to lcd  
char lcd_test[17]  = {"***-LCD_Test-***"};

void strobe_lcd(void){
	//twiddles bit 3, PORTF creating the enable signal for the LCD
	PORTF |= 0x08;
 35e:	20 91 62 00 	lds	r18, 0x0062
 362:	28 60       	ori	r18, 0x08	; 8
 364:	20 93 62 00 	sts	0x0062, r18
	PORTF &= ~0x08;
 368:	20 91 62 00 	lds	r18, 0x0062
 36c:	27 7f       	andi	r18, 0xF7	; 247
 36e:	20 93 62 00 	sts	0x0062, r18
 372:	ef e5       	ldi	r30, 0x5F	; 95
 374:	fd e6       	ldi	r31, 0x6D	; 109
 376:	31 97       	sbiw	r30, 0x01	; 1
 378:	f1 f7       	brne	.-4      	; 0x376 <lcd_init+0x36>
 37a:	00 c0       	rjmp	.+0      	; 0x37c <lcd_init+0x3c>
 37c:	00 00       	nop
 37e:	01 97       	sbiw	r24, 0x01	; 1

void lcd_init(void){
	int i;
	//initalize the LCD to receive data
	_delay_ms(15);   
	for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
 380:	41 f7       	brne	.-48     	; 0x352 <lcd_init+0x12>
		while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
		strobe_lcd();
		_delay_ms(7);
	}

	SPDR = 0x00;
 382:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 384:	77 9b       	sbis	0x0e, 7	; 14
 386:	fe cf       	rjmp	.-4      	; 0x384 <lcd_init+0x44>
	SPDR = 0x38;
 388:	88 e3       	ldi	r24, 0x38	; 56
 38a:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 38c:	77 9b       	sbis	0x0e, 7	; 14
 38e:	fe cf       	rjmp	.-4      	; 0x38c <lcd_init+0x4c>
char lcd_str[16];  //holds string to send to lcd  
char lcd_test[17]  = {"***-LCD_Test-***"};

void strobe_lcd(void){
	//twiddles bit 3, PORTF creating the enable signal for the LCD
	PORTF |= 0x08;
 390:	80 91 62 00 	lds	r24, 0x0062
 394:	88 60       	ori	r24, 0x08	; 8
 396:	80 93 62 00 	sts	0x0062, r24
	PORTF &= ~0x08;
 39a:	80 91 62 00 	lds	r24, 0x0062
 39e:	87 7f       	andi	r24, 0xF7	; 247
 3a0:	80 93 62 00 	sts	0x0062, r24
 3a4:	8f e1       	ldi	r24, 0x1F	; 31
 3a6:	9e e4       	ldi	r25, 0x4E	; 78
 3a8:	01 97       	sbiw	r24, 0x01	; 1
 3aa:	f1 f7       	brne	.-4      	; 0x3a8 <lcd_init+0x68>
 3ac:	00 c0       	rjmp	.+0      	; 0x3ae <lcd_init+0x6e>
 3ae:	00 00       	nop
	SPDR = 0x38;
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
	strobe_lcd();
	_delay_ms(5);   

	SPDR = 0x00;
 3b0:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 3b2:	77 9b       	sbis	0x0e, 7	; 14
 3b4:	fe cf       	rjmp	.-4      	; 0x3b2 <lcd_init+0x72>
	SPDR = 0x08;
 3b6:	88 e0       	ldi	r24, 0x08	; 8
 3b8:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 3ba:	77 9b       	sbis	0x0e, 7	; 14
 3bc:	fe cf       	rjmp	.-4      	; 0x3ba <lcd_init+0x7a>
char lcd_str[16];  //holds string to send to lcd  
char lcd_test[17]  = {"***-LCD_Test-***"};

void strobe_lcd(void){
	//twiddles bit 3, PORTF creating the enable signal for the LCD
	PORTF |= 0x08;
 3be:	80 91 62 00 	lds	r24, 0x0062
 3c2:	88 60       	ori	r24, 0x08	; 8
 3c4:	80 93 62 00 	sts	0x0062, r24
	PORTF &= ~0x08;
 3c8:	80 91 62 00 	lds	r24, 0x0062
 3cc:	87 7f       	andi	r24, 0xF7	; 247
 3ce:	80 93 62 00 	sts	0x0062, r24
 3d2:	ef e1       	ldi	r30, 0x1F	; 31
 3d4:	fe e4       	ldi	r31, 0x4E	; 78
 3d6:	31 97       	sbiw	r30, 0x01	; 1
 3d8:	f1 f7       	brne	.-4      	; 0x3d6 <lcd_init+0x96>
 3da:	00 c0       	rjmp	.+0      	; 0x3dc <lcd_init+0x9c>
 3dc:	00 00       	nop
	SPDR = 0x08;
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
	strobe_lcd();
	_delay_ms(5);

	SPDR = 0x00;
 3de:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 3e0:	77 9b       	sbis	0x0e, 7	; 14
 3e2:	fe cf       	rjmp	.-4      	; 0x3e0 <lcd_init+0xa0>
	SPDR = 0x01;
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 3e8:	77 9b       	sbis	0x0e, 7	; 14
 3ea:	fe cf       	rjmp	.-4      	; 0x3e8 <lcd_init+0xa8>
char lcd_str[16];  //holds string to send to lcd  
char lcd_test[17]  = {"***-LCD_Test-***"};

void strobe_lcd(void){
	//twiddles bit 3, PORTF creating the enable signal for the LCD
	PORTF |= 0x08;
 3ec:	80 91 62 00 	lds	r24, 0x0062
 3f0:	88 60       	ori	r24, 0x08	; 8
 3f2:	80 93 62 00 	sts	0x0062, r24
	PORTF &= ~0x08;
 3f6:	80 91 62 00 	lds	r24, 0x0062
 3fa:	87 7f       	andi	r24, 0xF7	; 247
 3fc:	80 93 62 00 	sts	0x0062, r24
 400:	8f e1       	ldi	r24, 0x1F	; 31
 402:	9e e4       	ldi	r25, 0x4E	; 78
 404:	01 97       	sbiw	r24, 0x01	; 1
 406:	f1 f7       	brne	.-4      	; 0x404 <lcd_init+0xc4>
 408:	00 c0       	rjmp	.+0      	; 0x40a <lcd_init+0xca>
 40a:	00 00       	nop
	SPDR = 0x01;
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
	strobe_lcd();
	_delay_ms(5);   

	SPDR = 0x00;
 40c:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 40e:	77 9b       	sbis	0x0e, 7	; 14
 410:	fe cf       	rjmp	.-4      	; 0x40e <lcd_init+0xce>
	SPDR = 0x06;
 412:	86 e0       	ldi	r24, 0x06	; 6
 414:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 416:	77 9b       	sbis	0x0e, 7	; 14
 418:	fe cf       	rjmp	.-4      	; 0x416 <lcd_init+0xd6>
char lcd_str[16];  //holds string to send to lcd  
char lcd_test[17]  = {"***-LCD_Test-***"};

void strobe_lcd(void){
	//twiddles bit 3, PORTF creating the enable signal for the LCD
	PORTF |= 0x08;
 41a:	80 91 62 00 	lds	r24, 0x0062
 41e:	88 60       	ori	r24, 0x08	; 8
 420:	80 93 62 00 	sts	0x0062, r24
	PORTF &= ~0x08;
 424:	80 91 62 00 	lds	r24, 0x0062
 428:	87 7f       	andi	r24, 0xF7	; 247
 42a:	80 93 62 00 	sts	0x0062, r24
 42e:	ef e1       	ldi	r30, 0x1F	; 31
 430:	fe e4       	ldi	r31, 0x4E	; 78
 432:	31 97       	sbiw	r30, 0x01	; 1
 434:	f1 f7       	brne	.-4      	; 0x432 <lcd_init+0xf2>
 436:	00 c0       	rjmp	.+0      	; 0x438 <lcd_init+0xf8>
 438:	00 00       	nop
	SPDR = 0x06;
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
	strobe_lcd();
	_delay_ms(5);

	SPDR = 0x00;
 43a:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 43c:	77 9b       	sbis	0x0e, 7	; 14
 43e:	fe cf       	rjmp	.-4      	; 0x43c <lcd_init+0xfc>
	SPDR = 0x0E;
 440:	8e e0       	ldi	r24, 0x0E	; 14
 442:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 444:	77 9b       	sbis	0x0e, 7	; 14
 446:	fe cf       	rjmp	.-4      	; 0x444 <lcd_init+0x104>
char lcd_str[16];  //holds string to send to lcd  
char lcd_test[17]  = {"***-LCD_Test-***"};

void strobe_lcd(void){
	//twiddles bit 3, PORTF creating the enable signal for the LCD
	PORTF |= 0x08;
 448:	80 91 62 00 	lds	r24, 0x0062
 44c:	88 60       	ori	r24, 0x08	; 8
 44e:	80 93 62 00 	sts	0x0062, r24
	PORTF &= ~0x08;
 452:	80 91 62 00 	lds	r24, 0x0062
 456:	87 7f       	andi	r24, 0xF7	; 247
 458:	80 93 62 00 	sts	0x0062, r24
 45c:	8f e1       	ldi	r24, 0x1F	; 31
 45e:	9e e4       	ldi	r25, 0x4E	; 78
 460:	01 97       	sbiw	r24, 0x01	; 1
 462:	f1 f7       	brne	.-4      	; 0x460 <lcd_init+0x120>
 464:	00 c0       	rjmp	.+0      	; 0x466 <lcd_init+0x126>
 466:	00 00       	nop
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
	SPDR = 0x0E;
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
	strobe_lcd();
	_delay_ms(5);
} 
 468:	08 95       	ret

0000046a <__divmodhi4>:
 46a:	97 fb       	bst	r25, 7
 46c:	09 2e       	mov	r0, r25
 46e:	07 26       	eor	r0, r23
 470:	0a d0       	rcall	.+20     	; 0x486 <__divmodhi4_neg1>
 472:	77 fd       	sbrc	r23, 7
 474:	04 d0       	rcall	.+8      	; 0x47e <__divmodhi4_neg2>
 476:	0c d0       	rcall	.+24     	; 0x490 <__udivmodhi4>
 478:	06 d0       	rcall	.+12     	; 0x486 <__divmodhi4_neg1>
 47a:	00 20       	and	r0, r0
 47c:	1a f4       	brpl	.+6      	; 0x484 <__divmodhi4_exit>

0000047e <__divmodhi4_neg2>:
 47e:	70 95       	com	r23
 480:	61 95       	neg	r22
 482:	7f 4f       	sbci	r23, 0xFF	; 255

00000484 <__divmodhi4_exit>:
 484:	08 95       	ret

00000486 <__divmodhi4_neg1>:
 486:	f6 f7       	brtc	.-4      	; 0x484 <__divmodhi4_exit>
 488:	90 95       	com	r25
 48a:	81 95       	neg	r24
 48c:	9f 4f       	sbci	r25, 0xFF	; 255
 48e:	08 95       	ret

00000490 <__udivmodhi4>:
 490:	aa 1b       	sub	r26, r26
 492:	bb 1b       	sub	r27, r27
 494:	51 e1       	ldi	r21, 0x11	; 17
 496:	07 c0       	rjmp	.+14     	; 0x4a6 <__udivmodhi4_ep>

00000498 <__udivmodhi4_loop>:
 498:	aa 1f       	adc	r26, r26
 49a:	bb 1f       	adc	r27, r27
 49c:	a6 17       	cp	r26, r22
 49e:	b7 07       	cpc	r27, r23
 4a0:	10 f0       	brcs	.+4      	; 0x4a6 <__udivmodhi4_ep>
 4a2:	a6 1b       	sub	r26, r22
 4a4:	b7 0b       	sbc	r27, r23

000004a6 <__udivmodhi4_ep>:
 4a6:	88 1f       	adc	r24, r24
 4a8:	99 1f       	adc	r25, r25
 4aa:	5a 95       	dec	r21
 4ac:	a9 f7       	brne	.-22     	; 0x498 <__udivmodhi4_loop>
 4ae:	80 95       	com	r24
 4b0:	90 95       	com	r25
 4b2:	bc 01       	movw	r22, r24
 4b4:	cd 01       	movw	r24, r26
 4b6:	08 95       	ret

000004b8 <itoa>:
 4b8:	fb 01       	movw	r30, r22
 4ba:	9f 01       	movw	r18, r30
 4bc:	e8 94       	clt
 4be:	42 30       	cpi	r20, 0x02	; 2
 4c0:	c4 f0       	brlt	.+48     	; 0x4f2 <itoa+0x3a>
 4c2:	45 32       	cpi	r20, 0x25	; 37
 4c4:	b4 f4       	brge	.+44     	; 0x4f2 <itoa+0x3a>
 4c6:	4a 30       	cpi	r20, 0x0A	; 10
 4c8:	29 f4       	brne	.+10     	; 0x4d4 <itoa+0x1c>
 4ca:	97 fb       	bst	r25, 7
 4cc:	1e f4       	brtc	.+6      	; 0x4d4 <itoa+0x1c>
 4ce:	90 95       	com	r25
 4d0:	81 95       	neg	r24
 4d2:	9f 4f       	sbci	r25, 0xFF	; 255
 4d4:	64 2f       	mov	r22, r20
 4d6:	77 27       	eor	r23, r23
 4d8:	0e 94 48 02 	call	0x490	; 0x490 <__udivmodhi4>
 4dc:	80 5d       	subi	r24, 0xD0	; 208
 4de:	8a 33       	cpi	r24, 0x3A	; 58
 4e0:	0c f0       	brlt	.+2      	; 0x4e4 <itoa+0x2c>
 4e2:	89 5d       	subi	r24, 0xD9	; 217
 4e4:	81 93       	st	Z+, r24
 4e6:	cb 01       	movw	r24, r22
 4e8:	00 97       	sbiw	r24, 0x00	; 0
 4ea:	a1 f7       	brne	.-24     	; 0x4d4 <itoa+0x1c>
 4ec:	16 f4       	brtc	.+4      	; 0x4f2 <itoa+0x3a>
 4ee:	5d e2       	ldi	r21, 0x2D	; 45
 4f0:	51 93       	st	Z+, r21
 4f2:	10 82       	st	Z, r1
 4f4:	c9 01       	movw	r24, r18
 4f6:	0c 94 7d 02 	jmp	0x4fa	; 0x4fa <strrev>

000004fa <strrev>:
 4fa:	dc 01       	movw	r26, r24
 4fc:	fc 01       	movw	r30, r24
 4fe:	67 2f       	mov	r22, r23
 500:	71 91       	ld	r23, Z+
 502:	77 23       	and	r23, r23
 504:	e1 f7       	brne	.-8      	; 0x4fe <strrev+0x4>
 506:	32 97       	sbiw	r30, 0x02	; 2
 508:	04 c0       	rjmp	.+8      	; 0x512 <strrev+0x18>
 50a:	7c 91       	ld	r23, X
 50c:	6d 93       	st	X+, r22
 50e:	70 83       	st	Z, r23
 510:	62 91       	ld	r22, -Z
 512:	ae 17       	cp	r26, r30
 514:	bf 07       	cpc	r27, r31
 516:	c8 f3       	brcs	.-14     	; 0x50a <strrev+0x10>
 518:	08 95       	ret

0000051a <_exit>:
 51a:	f8 94       	cli

0000051c <__stop_program>:
 51c:	ff cf       	rjmp	.-2      	; 0x51c <__stop_program>
